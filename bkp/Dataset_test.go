// Code generated by mockery v1.0.0
package bkp

import io "io"
import mock "github.com/stretchr/testify/mock"
import zfsiface "github.com/timaebi/go-zfs/zfsiface"

// Dataset is an autogenerated mock type for the Dataset type
type Dataset struct {
	mock.Mock
}

// Children provides a mock function with given fields: depth
func (_m *Dataset) Children(depth uint64) ([]zfsiface.Dataset, error) {
	ret := _m.Called(depth)

	var r0 []zfsiface.Dataset
	if rf, ok := ret.Get(0).(func(uint64) []zfsiface.Dataset); ok {
		r0 = rf(depth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(depth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Clone provides a mock function with given fields: dest, properties
func (_m *Dataset) Clone(dest string, properties map[string]string) (zfsiface.Dataset, error) {
	ret := _m.Called(dest, properties)

	var r0 zfsiface.Dataset
	if rf, ok := ret.Get(0).(func(string, map[string]string) zfsiface.Dataset); ok {
		r0 = rf(dest, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, map[string]string) error); ok {
		r1 = rf(dest, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Destroy provides a mock function with given fields: flags
func (_m *Dataset) Destroy(flags zfsiface.DestroyFlag) error {
	ret := _m.Called(flags)

	var r0 error
	if rf, ok := ret.Get(0).(func(zfsiface.DestroyFlag) error); ok {
		r0 = rf(flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Diff provides a mock function with given fields: snapshot
func (_m *Dataset) Diff(snapshot string) ([]*zfsiface.InodeChange, error) {
	ret := _m.Called(snapshot)

	var r0 []*zfsiface.InodeChange
	if rf, ok := ret.Get(0).(func(string) []*zfsiface.InodeChange); ok {
		r0 = rf(snapshot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*zfsiface.InodeChange)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(snapshot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNativeProperties provides a mock function with given fields:
func (_m *Dataset) GetNativeProperties() *zfsiface.NativeProperties {
	ret := _m.Called()

	var r0 *zfsiface.NativeProperties
	if rf, ok := ret.Get(0).(func() *zfsiface.NativeProperties); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zfsiface.NativeProperties)
		}
	}

	return r0
}

// GetProperty provides a mock function with given fields: key
func (_m *Dataset) GetProperty(key string) (string, zfsiface.PropertySource, error) {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 zfsiface.PropertySource
	if rf, ok := ret.Get(1).(func(string) zfsiface.PropertySource); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(zfsiface.PropertySource)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(key)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Mount provides a mock function with given fields: overlay, options
func (_m *Dataset) Mount(overlay bool, options []string) (zfsiface.Dataset, error) {
	ret := _m.Called(overlay, options)

	var r0 zfsiface.Dataset
	if rf, ok := ret.Get(0).(func(bool, []string) zfsiface.Dataset); ok {
		r0 = rf(overlay, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool, []string) error); ok {
		r1 = rf(overlay, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rename provides a mock function with given fields: name, createParent, recursiveRenameSnapshots
func (_m *Dataset) Rename(name string, createParent bool, recursiveRenameSnapshots bool) (zfsiface.Dataset, error) {
	ret := _m.Called(name, createParent, recursiveRenameSnapshots)

	var r0 zfsiface.Dataset
	if rf, ok := ret.Get(0).(func(string, bool, bool) zfsiface.Dataset); ok {
		r0 = rf(name, createParent, recursiveRenameSnapshots)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool) error); ok {
		r1 = rf(name, createParent, recursiveRenameSnapshots)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields: destroyMoreRecent
func (_m *Dataset) Rollback(destroyMoreRecent bool) error {
	ret := _m.Called(destroyMoreRecent)

	var r0 error
	if rf, ok := ret.Get(0).(func(bool) error); ok {
		r0 = rf(destroyMoreRecent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendIncrementalSnapshot provides a mock function with given fields: base, output
func (_m *Dataset) SendIncrementalSnapshot(base zfsiface.Dataset, output io.Writer) error {
	ret := _m.Called(base, output)

	var r0 error
	if rf, ok := ret.Get(0).(func(zfsiface.Dataset, io.Writer) error); ok {
		r0 = rf(base, output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendSnapshot provides a mock function with given fields: output
func (_m *Dataset) SendSnapshot(output io.Writer) error {
	ret := _m.Called(output)

	var r0 error
	if rf, ok := ret.Get(0).(func(io.Writer) error); ok {
		r0 = rf(output)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetProperty provides a mock function with given fields: key, val
func (_m *Dataset) SetProperty(key string, val string) error {
	ret := _m.Called(key, val)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(key, val)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snapshot provides a mock function with given fields: name, recursive
func (_m *Dataset) Snapshot(name string, recursive bool) (zfsiface.Dataset, error) {
	ret := _m.Called(name, recursive)

	var r0 zfsiface.Dataset
	if rf, ok := ret.Get(0).(func(string, bool) zfsiface.Dataset); ok {
		r0 = rf(name, recursive)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(name, recursive)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Snapshots provides a mock function with given fields:
func (_m *Dataset) Snapshots() ([]zfsiface.Dataset, error) {
	ret := _m.Called()

	var r0 []zfsiface.Dataset
	if rf, ok := ret.Get(0).(func() []zfsiface.Dataset); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unmount provides a mock function with given fields: force
func (_m *Dataset) Unmount(force bool) (zfsiface.Dataset, error) {
	ret := _m.Called(force)

	var r0 zfsiface.Dataset
	if rf, ok := ret.Get(0).(func(bool) zfsiface.Dataset); ok {
		r0 = rf(force)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zfsiface.Dataset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(bool) error); ok {
		r1 = rf(force)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
