// Code generated by mockery v1.0.0
package bkp

import aws "github.com/aws/aws-sdk-go/aws"
import glacier "github.com/aws/aws-sdk-go/service/glacier"

import mock "github.com/stretchr/testify/mock"
import request "github.com/aws/aws-sdk-go/aws/request"

// GlacierAPI is an autogenerated mock type for the GlacierAPI type
type GlacierAPI struct {
	mock.Mock
}

// AbortMultipartUpload provides a mock function with given fields: _a0
func (_m *GlacierAPI) AbortMultipartUpload(_a0 *glacier.AbortMultipartUploadInput) (*glacier.AbortMultipartUploadOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.AbortMultipartUploadOutput
	if rf, ok := ret.Get(0).(func(*glacier.AbortMultipartUploadInput) *glacier.AbortMultipartUploadOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.AbortMultipartUploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.AbortMultipartUploadInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AbortMultipartUploadRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) AbortMultipartUploadRequest(_a0 *glacier.AbortMultipartUploadInput) (*request.Request, *glacier.AbortMultipartUploadOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.AbortMultipartUploadInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.AbortMultipartUploadOutput
	if rf, ok := ret.Get(1).(func(*glacier.AbortMultipartUploadInput) *glacier.AbortMultipartUploadOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.AbortMultipartUploadOutput)
		}
	}

	return r0, r1
}

// AbortMultipartUploadWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) AbortMultipartUploadWithContext(_a0 aws.Context, _a1 *glacier.AbortMultipartUploadInput, _a2 ...request.Option) (*glacier.AbortMultipartUploadOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.AbortMultipartUploadOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.AbortMultipartUploadInput, ...request.Option) *glacier.AbortMultipartUploadOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.AbortMultipartUploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.AbortMultipartUploadInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AbortVaultLock provides a mock function with given fields: _a0
func (_m *GlacierAPI) AbortVaultLock(_a0 *glacier.AbortVaultLockInput) (*glacier.AbortVaultLockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.AbortVaultLockOutput
	if rf, ok := ret.Get(0).(func(*glacier.AbortVaultLockInput) *glacier.AbortVaultLockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.AbortVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.AbortVaultLockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AbortVaultLockRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) AbortVaultLockRequest(_a0 *glacier.AbortVaultLockInput) (*request.Request, *glacier.AbortVaultLockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.AbortVaultLockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.AbortVaultLockOutput
	if rf, ok := ret.Get(1).(func(*glacier.AbortVaultLockInput) *glacier.AbortVaultLockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.AbortVaultLockOutput)
		}
	}

	return r0, r1
}

// AbortVaultLockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) AbortVaultLockWithContext(_a0 aws.Context, _a1 *glacier.AbortVaultLockInput, _a2 ...request.Option) (*glacier.AbortVaultLockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.AbortVaultLockOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.AbortVaultLockInput, ...request.Option) *glacier.AbortVaultLockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.AbortVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.AbortVaultLockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToVault provides a mock function with given fields: _a0
func (_m *GlacierAPI) AddTagsToVault(_a0 *glacier.AddTagsToVaultInput) (*glacier.AddTagsToVaultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.AddTagsToVaultOutput
	if rf, ok := ret.Get(0).(func(*glacier.AddTagsToVaultInput) *glacier.AddTagsToVaultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.AddTagsToVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.AddTagsToVaultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToVaultRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) AddTagsToVaultRequest(_a0 *glacier.AddTagsToVaultInput) (*request.Request, *glacier.AddTagsToVaultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.AddTagsToVaultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.AddTagsToVaultOutput
	if rf, ok := ret.Get(1).(func(*glacier.AddTagsToVaultInput) *glacier.AddTagsToVaultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.AddTagsToVaultOutput)
		}
	}

	return r0, r1
}

// AddTagsToVaultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) AddTagsToVaultWithContext(_a0 aws.Context, _a1 *glacier.AddTagsToVaultInput, _a2 ...request.Option) (*glacier.AddTagsToVaultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.AddTagsToVaultOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.AddTagsToVaultInput, ...request.Option) *glacier.AddTagsToVaultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.AddTagsToVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.AddTagsToVaultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteMultipartUpload provides a mock function with given fields: _a0
func (_m *GlacierAPI) CompleteMultipartUpload(_a0 *glacier.CompleteMultipartUploadInput) (*glacier.ArchiveCreationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ArchiveCreationOutput
	if rf, ok := ret.Get(0).(func(*glacier.CompleteMultipartUploadInput) *glacier.ArchiveCreationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ArchiveCreationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.CompleteMultipartUploadInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteMultipartUploadRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) CompleteMultipartUploadRequest(_a0 *glacier.CompleteMultipartUploadInput) (*request.Request, *glacier.ArchiveCreationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.CompleteMultipartUploadInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ArchiveCreationOutput
	if rf, ok := ret.Get(1).(func(*glacier.CompleteMultipartUploadInput) *glacier.ArchiveCreationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ArchiveCreationOutput)
		}
	}

	return r0, r1
}

// CompleteMultipartUploadWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) CompleteMultipartUploadWithContext(_a0 aws.Context, _a1 *glacier.CompleteMultipartUploadInput, _a2 ...request.Option) (*glacier.ArchiveCreationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ArchiveCreationOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.CompleteMultipartUploadInput, ...request.Option) *glacier.ArchiveCreationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ArchiveCreationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.CompleteMultipartUploadInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteVaultLock provides a mock function with given fields: _a0
func (_m *GlacierAPI) CompleteVaultLock(_a0 *glacier.CompleteVaultLockInput) (*glacier.CompleteVaultLockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.CompleteVaultLockOutput
	if rf, ok := ret.Get(0).(func(*glacier.CompleteVaultLockInput) *glacier.CompleteVaultLockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.CompleteVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.CompleteVaultLockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteVaultLockRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) CompleteVaultLockRequest(_a0 *glacier.CompleteVaultLockInput) (*request.Request, *glacier.CompleteVaultLockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.CompleteVaultLockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.CompleteVaultLockOutput
	if rf, ok := ret.Get(1).(func(*glacier.CompleteVaultLockInput) *glacier.CompleteVaultLockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.CompleteVaultLockOutput)
		}
	}

	return r0, r1
}

// CompleteVaultLockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) CompleteVaultLockWithContext(_a0 aws.Context, _a1 *glacier.CompleteVaultLockInput, _a2 ...request.Option) (*glacier.CompleteVaultLockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.CompleteVaultLockOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.CompleteVaultLockInput, ...request.Option) *glacier.CompleteVaultLockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.CompleteVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.CompleteVaultLockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVault provides a mock function with given fields: _a0
func (_m *GlacierAPI) CreateVault(_a0 *glacier.CreateVaultInput) (*glacier.CreateVaultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.CreateVaultOutput
	if rf, ok := ret.Get(0).(func(*glacier.CreateVaultInput) *glacier.CreateVaultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.CreateVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.CreateVaultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVaultRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) CreateVaultRequest(_a0 *glacier.CreateVaultInput) (*request.Request, *glacier.CreateVaultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.CreateVaultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.CreateVaultOutput
	if rf, ok := ret.Get(1).(func(*glacier.CreateVaultInput) *glacier.CreateVaultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.CreateVaultOutput)
		}
	}

	return r0, r1
}

// CreateVaultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) CreateVaultWithContext(_a0 aws.Context, _a1 *glacier.CreateVaultInput, _a2 ...request.Option) (*glacier.CreateVaultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.CreateVaultOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.CreateVaultInput, ...request.Option) *glacier.CreateVaultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.CreateVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.CreateVaultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchive provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteArchive(_a0 *glacier.DeleteArchiveInput) (*glacier.DeleteArchiveOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.DeleteArchiveOutput
	if rf, ok := ret.Get(0).(func(*glacier.DeleteArchiveInput) *glacier.DeleteArchiveOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.DeleteArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchiveRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteArchiveRequest(_a0 *glacier.DeleteArchiveInput) (*request.Request, *glacier.DeleteArchiveOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.DeleteArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.DeleteArchiveOutput
	if rf, ok := ret.Get(1).(func(*glacier.DeleteArchiveInput) *glacier.DeleteArchiveOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.DeleteArchiveOutput)
		}
	}

	return r0, r1
}

// DeleteArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) DeleteArchiveWithContext(_a0 aws.Context, _a1 *glacier.DeleteArchiveInput, _a2 ...request.Option) (*glacier.DeleteArchiveOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.DeleteArchiveOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DeleteArchiveInput, ...request.Option) *glacier.DeleteArchiveOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteArchiveOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.DeleteArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVault provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteVault(_a0 *glacier.DeleteVaultInput) (*glacier.DeleteVaultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.DeleteVaultOutput
	if rf, ok := ret.Get(0).(func(*glacier.DeleteVaultInput) *glacier.DeleteVaultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.DeleteVaultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVaultAccessPolicy provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteVaultAccessPolicy(_a0 *glacier.DeleteVaultAccessPolicyInput) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.DeleteVaultAccessPolicyOutput
	if rf, ok := ret.Get(0).(func(*glacier.DeleteVaultAccessPolicyInput) *glacier.DeleteVaultAccessPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteVaultAccessPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.DeleteVaultAccessPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVaultAccessPolicyRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteVaultAccessPolicyRequest(_a0 *glacier.DeleteVaultAccessPolicyInput) (*request.Request, *glacier.DeleteVaultAccessPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.DeleteVaultAccessPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.DeleteVaultAccessPolicyOutput
	if rf, ok := ret.Get(1).(func(*glacier.DeleteVaultAccessPolicyInput) *glacier.DeleteVaultAccessPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.DeleteVaultAccessPolicyOutput)
		}
	}

	return r0, r1
}

// DeleteVaultAccessPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) DeleteVaultAccessPolicyWithContext(_a0 aws.Context, _a1 *glacier.DeleteVaultAccessPolicyInput, _a2 ...request.Option) (*glacier.DeleteVaultAccessPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.DeleteVaultAccessPolicyOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DeleteVaultAccessPolicyInput, ...request.Option) *glacier.DeleteVaultAccessPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteVaultAccessPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.DeleteVaultAccessPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVaultNotifications provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteVaultNotifications(_a0 *glacier.DeleteVaultNotificationsInput) (*glacier.DeleteVaultNotificationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.DeleteVaultNotificationsOutput
	if rf, ok := ret.Get(0).(func(*glacier.DeleteVaultNotificationsInput) *glacier.DeleteVaultNotificationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteVaultNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.DeleteVaultNotificationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVaultNotificationsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteVaultNotificationsRequest(_a0 *glacier.DeleteVaultNotificationsInput) (*request.Request, *glacier.DeleteVaultNotificationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.DeleteVaultNotificationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.DeleteVaultNotificationsOutput
	if rf, ok := ret.Get(1).(func(*glacier.DeleteVaultNotificationsInput) *glacier.DeleteVaultNotificationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.DeleteVaultNotificationsOutput)
		}
	}

	return r0, r1
}

// DeleteVaultNotificationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) DeleteVaultNotificationsWithContext(_a0 aws.Context, _a1 *glacier.DeleteVaultNotificationsInput, _a2 ...request.Option) (*glacier.DeleteVaultNotificationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.DeleteVaultNotificationsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DeleteVaultNotificationsInput, ...request.Option) *glacier.DeleteVaultNotificationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteVaultNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.DeleteVaultNotificationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVaultRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) DeleteVaultRequest(_a0 *glacier.DeleteVaultInput) (*request.Request, *glacier.DeleteVaultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.DeleteVaultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.DeleteVaultOutput
	if rf, ok := ret.Get(1).(func(*glacier.DeleteVaultInput) *glacier.DeleteVaultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.DeleteVaultOutput)
		}
	}

	return r0, r1
}

// DeleteVaultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) DeleteVaultWithContext(_a0 aws.Context, _a1 *glacier.DeleteVaultInput, _a2 ...request.Option) (*glacier.DeleteVaultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.DeleteVaultOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DeleteVaultInput, ...request.Option) *glacier.DeleteVaultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DeleteVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.DeleteVaultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJob provides a mock function with given fields: _a0
func (_m *GlacierAPI) DescribeJob(_a0 *glacier.DescribeJobInput) (*glacier.JobDescription, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.JobDescription
	if rf, ok := ret.Get(0).(func(*glacier.DescribeJobInput) *glacier.JobDescription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.JobDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.DescribeJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) DescribeJobRequest(_a0 *glacier.DescribeJobInput) (*request.Request, *glacier.JobDescription) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.DescribeJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.JobDescription
	if rf, ok := ret.Get(1).(func(*glacier.DescribeJobInput) *glacier.JobDescription); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.JobDescription)
		}
	}

	return r0, r1
}

// DescribeJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) DescribeJobWithContext(_a0 aws.Context, _a1 *glacier.DescribeJobInput, _a2 ...request.Option) (*glacier.JobDescription, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.JobDescription
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DescribeJobInput, ...request.Option) *glacier.JobDescription); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.JobDescription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.DescribeJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVault provides a mock function with given fields: _a0
func (_m *GlacierAPI) DescribeVault(_a0 *glacier.DescribeVaultInput) (*glacier.DescribeVaultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.DescribeVaultOutput
	if rf, ok := ret.Get(0).(func(*glacier.DescribeVaultInput) *glacier.DescribeVaultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DescribeVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.DescribeVaultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVaultRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) DescribeVaultRequest(_a0 *glacier.DescribeVaultInput) (*request.Request, *glacier.DescribeVaultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.DescribeVaultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.DescribeVaultOutput
	if rf, ok := ret.Get(1).(func(*glacier.DescribeVaultInput) *glacier.DescribeVaultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.DescribeVaultOutput)
		}
	}

	return r0, r1
}

// DescribeVaultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) DescribeVaultWithContext(_a0 aws.Context, _a1 *glacier.DescribeVaultInput, _a2 ...request.Option) (*glacier.DescribeVaultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.DescribeVaultOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DescribeVaultInput, ...request.Option) *glacier.DescribeVaultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.DescribeVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.DescribeVaultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataRetrievalPolicy provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetDataRetrievalPolicy(_a0 *glacier.GetDataRetrievalPolicyInput) (*glacier.GetDataRetrievalPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.GetDataRetrievalPolicyOutput
	if rf, ok := ret.Get(0).(func(*glacier.GetDataRetrievalPolicyInput) *glacier.GetDataRetrievalPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetDataRetrievalPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.GetDataRetrievalPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataRetrievalPolicyRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetDataRetrievalPolicyRequest(_a0 *glacier.GetDataRetrievalPolicyInput) (*request.Request, *glacier.GetDataRetrievalPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.GetDataRetrievalPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.GetDataRetrievalPolicyOutput
	if rf, ok := ret.Get(1).(func(*glacier.GetDataRetrievalPolicyInput) *glacier.GetDataRetrievalPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.GetDataRetrievalPolicyOutput)
		}
	}

	return r0, r1
}

// GetDataRetrievalPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) GetDataRetrievalPolicyWithContext(_a0 aws.Context, _a1 *glacier.GetDataRetrievalPolicyInput, _a2 ...request.Option) (*glacier.GetDataRetrievalPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.GetDataRetrievalPolicyOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.GetDataRetrievalPolicyInput, ...request.Option) *glacier.GetDataRetrievalPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetDataRetrievalPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.GetDataRetrievalPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobOutput provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetJobOutput(_a0 *glacier.GetJobOutputInput) (*glacier.GetJobOutputOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.GetJobOutputOutput
	if rf, ok := ret.Get(0).(func(*glacier.GetJobOutputInput) *glacier.GetJobOutputOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetJobOutputOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.GetJobOutputInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobOutputRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetJobOutputRequest(_a0 *glacier.GetJobOutputInput) (*request.Request, *glacier.GetJobOutputOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.GetJobOutputInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.GetJobOutputOutput
	if rf, ok := ret.Get(1).(func(*glacier.GetJobOutputInput) *glacier.GetJobOutputOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.GetJobOutputOutput)
		}
	}

	return r0, r1
}

// GetJobOutputWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) GetJobOutputWithContext(_a0 aws.Context, _a1 *glacier.GetJobOutputInput, _a2 ...request.Option) (*glacier.GetJobOutputOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.GetJobOutputOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.GetJobOutputInput, ...request.Option) *glacier.GetJobOutputOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetJobOutputOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.GetJobOutputInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultAccessPolicy provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetVaultAccessPolicy(_a0 *glacier.GetVaultAccessPolicyInput) (*glacier.GetVaultAccessPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.GetVaultAccessPolicyOutput
	if rf, ok := ret.Get(0).(func(*glacier.GetVaultAccessPolicyInput) *glacier.GetVaultAccessPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetVaultAccessPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.GetVaultAccessPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultAccessPolicyRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetVaultAccessPolicyRequest(_a0 *glacier.GetVaultAccessPolicyInput) (*request.Request, *glacier.GetVaultAccessPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.GetVaultAccessPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.GetVaultAccessPolicyOutput
	if rf, ok := ret.Get(1).(func(*glacier.GetVaultAccessPolicyInput) *glacier.GetVaultAccessPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.GetVaultAccessPolicyOutput)
		}
	}

	return r0, r1
}

// GetVaultAccessPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) GetVaultAccessPolicyWithContext(_a0 aws.Context, _a1 *glacier.GetVaultAccessPolicyInput, _a2 ...request.Option) (*glacier.GetVaultAccessPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.GetVaultAccessPolicyOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.GetVaultAccessPolicyInput, ...request.Option) *glacier.GetVaultAccessPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetVaultAccessPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.GetVaultAccessPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultLock provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetVaultLock(_a0 *glacier.GetVaultLockInput) (*glacier.GetVaultLockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.GetVaultLockOutput
	if rf, ok := ret.Get(0).(func(*glacier.GetVaultLockInput) *glacier.GetVaultLockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.GetVaultLockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultLockRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetVaultLockRequest(_a0 *glacier.GetVaultLockInput) (*request.Request, *glacier.GetVaultLockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.GetVaultLockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.GetVaultLockOutput
	if rf, ok := ret.Get(1).(func(*glacier.GetVaultLockInput) *glacier.GetVaultLockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.GetVaultLockOutput)
		}
	}

	return r0, r1
}

// GetVaultLockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) GetVaultLockWithContext(_a0 aws.Context, _a1 *glacier.GetVaultLockInput, _a2 ...request.Option) (*glacier.GetVaultLockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.GetVaultLockOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.GetVaultLockInput, ...request.Option) *glacier.GetVaultLockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.GetVaultLockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultNotifications provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetVaultNotifications(_a0 *glacier.GetVaultNotificationsInput) (*glacier.GetVaultNotificationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.GetVaultNotificationsOutput
	if rf, ok := ret.Get(0).(func(*glacier.GetVaultNotificationsInput) *glacier.GetVaultNotificationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetVaultNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.GetVaultNotificationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaultNotificationsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) GetVaultNotificationsRequest(_a0 *glacier.GetVaultNotificationsInput) (*request.Request, *glacier.GetVaultNotificationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.GetVaultNotificationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.GetVaultNotificationsOutput
	if rf, ok := ret.Get(1).(func(*glacier.GetVaultNotificationsInput) *glacier.GetVaultNotificationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.GetVaultNotificationsOutput)
		}
	}

	return r0, r1
}

// GetVaultNotificationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) GetVaultNotificationsWithContext(_a0 aws.Context, _a1 *glacier.GetVaultNotificationsInput, _a2 ...request.Option) (*glacier.GetVaultNotificationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.GetVaultNotificationsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.GetVaultNotificationsInput, ...request.Option) *glacier.GetVaultNotificationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.GetVaultNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.GetVaultNotificationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateJob provides a mock function with given fields: _a0
func (_m *GlacierAPI) InitiateJob(_a0 *glacier.InitiateJobInput) (*glacier.InitiateJobOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.InitiateJobOutput
	if rf, ok := ret.Get(0).(func(*glacier.InitiateJobInput) *glacier.InitiateJobOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.InitiateJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.InitiateJobInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateJobRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) InitiateJobRequest(_a0 *glacier.InitiateJobInput) (*request.Request, *glacier.InitiateJobOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.InitiateJobInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.InitiateJobOutput
	if rf, ok := ret.Get(1).(func(*glacier.InitiateJobInput) *glacier.InitiateJobOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.InitiateJobOutput)
		}
	}

	return r0, r1
}

// InitiateJobWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) InitiateJobWithContext(_a0 aws.Context, _a1 *glacier.InitiateJobInput, _a2 ...request.Option) (*glacier.InitiateJobOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.InitiateJobOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.InitiateJobInput, ...request.Option) *glacier.InitiateJobOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.InitiateJobOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.InitiateJobInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateMultipartUpload provides a mock function with given fields: _a0
func (_m *GlacierAPI) InitiateMultipartUpload(_a0 *glacier.InitiateMultipartUploadInput) (*glacier.InitiateMultipartUploadOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.InitiateMultipartUploadOutput
	if rf, ok := ret.Get(0).(func(*glacier.InitiateMultipartUploadInput) *glacier.InitiateMultipartUploadOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.InitiateMultipartUploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.InitiateMultipartUploadInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateMultipartUploadRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) InitiateMultipartUploadRequest(_a0 *glacier.InitiateMultipartUploadInput) (*request.Request, *glacier.InitiateMultipartUploadOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.InitiateMultipartUploadInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.InitiateMultipartUploadOutput
	if rf, ok := ret.Get(1).(func(*glacier.InitiateMultipartUploadInput) *glacier.InitiateMultipartUploadOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.InitiateMultipartUploadOutput)
		}
	}

	return r0, r1
}

// InitiateMultipartUploadWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) InitiateMultipartUploadWithContext(_a0 aws.Context, _a1 *glacier.InitiateMultipartUploadInput, _a2 ...request.Option) (*glacier.InitiateMultipartUploadOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.InitiateMultipartUploadOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.InitiateMultipartUploadInput, ...request.Option) *glacier.InitiateMultipartUploadOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.InitiateMultipartUploadOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.InitiateMultipartUploadInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateVaultLock provides a mock function with given fields: _a0
func (_m *GlacierAPI) InitiateVaultLock(_a0 *glacier.InitiateVaultLockInput) (*glacier.InitiateVaultLockOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.InitiateVaultLockOutput
	if rf, ok := ret.Get(0).(func(*glacier.InitiateVaultLockInput) *glacier.InitiateVaultLockOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.InitiateVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.InitiateVaultLockInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateVaultLockRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) InitiateVaultLockRequest(_a0 *glacier.InitiateVaultLockInput) (*request.Request, *glacier.InitiateVaultLockOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.InitiateVaultLockInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.InitiateVaultLockOutput
	if rf, ok := ret.Get(1).(func(*glacier.InitiateVaultLockInput) *glacier.InitiateVaultLockOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.InitiateVaultLockOutput)
		}
	}

	return r0, r1
}

// InitiateVaultLockWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) InitiateVaultLockWithContext(_a0 aws.Context, _a1 *glacier.InitiateVaultLockInput, _a2 ...request.Option) (*glacier.InitiateVaultLockOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.InitiateVaultLockOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.InitiateVaultLockInput, ...request.Option) *glacier.InitiateVaultLockOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.InitiateVaultLockOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.InitiateVaultLockInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListJobs(_a0 *glacier.ListJobsInput) (*glacier.ListJobsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ListJobsOutput
	if rf, ok := ret.Get(0).(func(*glacier.ListJobsInput) *glacier.ListJobsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.ListJobsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobsPages provides a mock function with given fields: _a0, _a1
func (_m *GlacierAPI) ListJobsPages(_a0 *glacier.ListJobsInput, _a1 func(*glacier.ListJobsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*glacier.ListJobsInput, func(*glacier.ListJobsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListJobsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GlacierAPI) ListJobsPagesWithContext(_a0 aws.Context, _a1 *glacier.ListJobsInput, _a2 func(*glacier.ListJobsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListJobsInput, func(*glacier.ListJobsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListJobsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListJobsRequest(_a0 *glacier.ListJobsInput) (*request.Request, *glacier.ListJobsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.ListJobsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ListJobsOutput
	if rf, ok := ret.Get(1).(func(*glacier.ListJobsInput) *glacier.ListJobsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ListJobsOutput)
		}
	}

	return r0, r1
}

// ListJobsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) ListJobsWithContext(_a0 aws.Context, _a1 *glacier.ListJobsInput, _a2 ...request.Option) (*glacier.ListJobsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ListJobsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListJobsInput, ...request.Option) *glacier.ListJobsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListJobsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.ListJobsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultipartUploads provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListMultipartUploads(_a0 *glacier.ListMultipartUploadsInput) (*glacier.ListMultipartUploadsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ListMultipartUploadsOutput
	if rf, ok := ret.Get(0).(func(*glacier.ListMultipartUploadsInput) *glacier.ListMultipartUploadsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListMultipartUploadsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.ListMultipartUploadsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultipartUploadsPages provides a mock function with given fields: _a0, _a1
func (_m *GlacierAPI) ListMultipartUploadsPages(_a0 *glacier.ListMultipartUploadsInput, _a1 func(*glacier.ListMultipartUploadsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*glacier.ListMultipartUploadsInput, func(*glacier.ListMultipartUploadsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMultipartUploadsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GlacierAPI) ListMultipartUploadsPagesWithContext(_a0 aws.Context, _a1 *glacier.ListMultipartUploadsInput, _a2 func(*glacier.ListMultipartUploadsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListMultipartUploadsInput, func(*glacier.ListMultipartUploadsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListMultipartUploadsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListMultipartUploadsRequest(_a0 *glacier.ListMultipartUploadsInput) (*request.Request, *glacier.ListMultipartUploadsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.ListMultipartUploadsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ListMultipartUploadsOutput
	if rf, ok := ret.Get(1).(func(*glacier.ListMultipartUploadsInput) *glacier.ListMultipartUploadsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ListMultipartUploadsOutput)
		}
	}

	return r0, r1
}

// ListMultipartUploadsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) ListMultipartUploadsWithContext(_a0 aws.Context, _a1 *glacier.ListMultipartUploadsInput, _a2 ...request.Option) (*glacier.ListMultipartUploadsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ListMultipartUploadsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListMultipartUploadsInput, ...request.Option) *glacier.ListMultipartUploadsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListMultipartUploadsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.ListMultipartUploadsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListParts provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListParts(_a0 *glacier.ListPartsInput) (*glacier.ListPartsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ListPartsOutput
	if rf, ok := ret.Get(0).(func(*glacier.ListPartsInput) *glacier.ListPartsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListPartsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.ListPartsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartsPages provides a mock function with given fields: _a0, _a1
func (_m *GlacierAPI) ListPartsPages(_a0 *glacier.ListPartsInput, _a1 func(*glacier.ListPartsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*glacier.ListPartsInput, func(*glacier.ListPartsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPartsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GlacierAPI) ListPartsPagesWithContext(_a0 aws.Context, _a1 *glacier.ListPartsInput, _a2 func(*glacier.ListPartsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListPartsInput, func(*glacier.ListPartsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListPartsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListPartsRequest(_a0 *glacier.ListPartsInput) (*request.Request, *glacier.ListPartsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.ListPartsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ListPartsOutput
	if rf, ok := ret.Get(1).(func(*glacier.ListPartsInput) *glacier.ListPartsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ListPartsOutput)
		}
	}

	return r0, r1
}

// ListPartsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) ListPartsWithContext(_a0 aws.Context, _a1 *glacier.ListPartsInput, _a2 ...request.Option) (*glacier.ListPartsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ListPartsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListPartsInput, ...request.Option) *glacier.ListPartsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListPartsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.ListPartsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisionedCapacity provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListProvisionedCapacity(_a0 *glacier.ListProvisionedCapacityInput) (*glacier.ListProvisionedCapacityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ListProvisionedCapacityOutput
	if rf, ok := ret.Get(0).(func(*glacier.ListProvisionedCapacityInput) *glacier.ListProvisionedCapacityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListProvisionedCapacityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.ListProvisionedCapacityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisionedCapacityRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListProvisionedCapacityRequest(_a0 *glacier.ListProvisionedCapacityInput) (*request.Request, *glacier.ListProvisionedCapacityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.ListProvisionedCapacityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ListProvisionedCapacityOutput
	if rf, ok := ret.Get(1).(func(*glacier.ListProvisionedCapacityInput) *glacier.ListProvisionedCapacityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ListProvisionedCapacityOutput)
		}
	}

	return r0, r1
}

// ListProvisionedCapacityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) ListProvisionedCapacityWithContext(_a0 aws.Context, _a1 *glacier.ListProvisionedCapacityInput, _a2 ...request.Option) (*glacier.ListProvisionedCapacityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ListProvisionedCapacityOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListProvisionedCapacityInput, ...request.Option) *glacier.ListProvisionedCapacityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListProvisionedCapacityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.ListProvisionedCapacityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForVault provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListTagsForVault(_a0 *glacier.ListTagsForVaultInput) (*glacier.ListTagsForVaultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ListTagsForVaultOutput
	if rf, ok := ret.Get(0).(func(*glacier.ListTagsForVaultInput) *glacier.ListTagsForVaultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListTagsForVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.ListTagsForVaultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForVaultRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListTagsForVaultRequest(_a0 *glacier.ListTagsForVaultInput) (*request.Request, *glacier.ListTagsForVaultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.ListTagsForVaultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ListTagsForVaultOutput
	if rf, ok := ret.Get(1).(func(*glacier.ListTagsForVaultInput) *glacier.ListTagsForVaultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ListTagsForVaultOutput)
		}
	}

	return r0, r1
}

// ListTagsForVaultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) ListTagsForVaultWithContext(_a0 aws.Context, _a1 *glacier.ListTagsForVaultInput, _a2 ...request.Option) (*glacier.ListTagsForVaultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ListTagsForVaultOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListTagsForVaultInput, ...request.Option) *glacier.ListTagsForVaultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListTagsForVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.ListTagsForVaultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVaults provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListVaults(_a0 *glacier.ListVaultsInput) (*glacier.ListVaultsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ListVaultsOutput
	if rf, ok := ret.Get(0).(func(*glacier.ListVaultsInput) *glacier.ListVaultsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListVaultsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.ListVaultsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVaultsPages provides a mock function with given fields: _a0, _a1
func (_m *GlacierAPI) ListVaultsPages(_a0 *glacier.ListVaultsInput, _a1 func(*glacier.ListVaultsOutput, bool) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*glacier.ListVaultsInput, func(*glacier.ListVaultsOutput, bool) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListVaultsPagesWithContext provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *GlacierAPI) ListVaultsPagesWithContext(_a0 aws.Context, _a1 *glacier.ListVaultsInput, _a2 func(*glacier.ListVaultsOutput, bool) bool, _a3 ...request.Option) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListVaultsInput, func(*glacier.ListVaultsOutput, bool) bool, ...request.Option) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListVaultsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) ListVaultsRequest(_a0 *glacier.ListVaultsInput) (*request.Request, *glacier.ListVaultsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.ListVaultsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ListVaultsOutput
	if rf, ok := ret.Get(1).(func(*glacier.ListVaultsInput) *glacier.ListVaultsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ListVaultsOutput)
		}
	}

	return r0, r1
}

// ListVaultsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) ListVaultsWithContext(_a0 aws.Context, _a1 *glacier.ListVaultsInput, _a2 ...request.Option) (*glacier.ListVaultsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ListVaultsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.ListVaultsInput, ...request.Option) *glacier.ListVaultsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ListVaultsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.ListVaultsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseProvisionedCapacity provides a mock function with given fields: _a0
func (_m *GlacierAPI) PurchaseProvisionedCapacity(_a0 *glacier.PurchaseProvisionedCapacityInput) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.PurchaseProvisionedCapacityOutput
	if rf, ok := ret.Get(0).(func(*glacier.PurchaseProvisionedCapacityInput) *glacier.PurchaseProvisionedCapacityOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.PurchaseProvisionedCapacityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.PurchaseProvisionedCapacityInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PurchaseProvisionedCapacityRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) PurchaseProvisionedCapacityRequest(_a0 *glacier.PurchaseProvisionedCapacityInput) (*request.Request, *glacier.PurchaseProvisionedCapacityOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.PurchaseProvisionedCapacityInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.PurchaseProvisionedCapacityOutput
	if rf, ok := ret.Get(1).(func(*glacier.PurchaseProvisionedCapacityInput) *glacier.PurchaseProvisionedCapacityOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.PurchaseProvisionedCapacityOutput)
		}
	}

	return r0, r1
}

// PurchaseProvisionedCapacityWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) PurchaseProvisionedCapacityWithContext(_a0 aws.Context, _a1 *glacier.PurchaseProvisionedCapacityInput, _a2 ...request.Option) (*glacier.PurchaseProvisionedCapacityOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.PurchaseProvisionedCapacityOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.PurchaseProvisionedCapacityInput, ...request.Option) *glacier.PurchaseProvisionedCapacityOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.PurchaseProvisionedCapacityOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.PurchaseProvisionedCapacityInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromVault provides a mock function with given fields: _a0
func (_m *GlacierAPI) RemoveTagsFromVault(_a0 *glacier.RemoveTagsFromVaultInput) (*glacier.RemoveTagsFromVaultOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.RemoveTagsFromVaultOutput
	if rf, ok := ret.Get(0).(func(*glacier.RemoveTagsFromVaultInput) *glacier.RemoveTagsFromVaultOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.RemoveTagsFromVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.RemoveTagsFromVaultInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromVaultRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) RemoveTagsFromVaultRequest(_a0 *glacier.RemoveTagsFromVaultInput) (*request.Request, *glacier.RemoveTagsFromVaultOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.RemoveTagsFromVaultInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.RemoveTagsFromVaultOutput
	if rf, ok := ret.Get(1).(func(*glacier.RemoveTagsFromVaultInput) *glacier.RemoveTagsFromVaultOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.RemoveTagsFromVaultOutput)
		}
	}

	return r0, r1
}

// RemoveTagsFromVaultWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) RemoveTagsFromVaultWithContext(_a0 aws.Context, _a1 *glacier.RemoveTagsFromVaultInput, _a2 ...request.Option) (*glacier.RemoveTagsFromVaultOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.RemoveTagsFromVaultOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.RemoveTagsFromVaultInput, ...request.Option) *glacier.RemoveTagsFromVaultOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.RemoveTagsFromVaultOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.RemoveTagsFromVaultInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDataRetrievalPolicy provides a mock function with given fields: _a0
func (_m *GlacierAPI) SetDataRetrievalPolicy(_a0 *glacier.SetDataRetrievalPolicyInput) (*glacier.SetDataRetrievalPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.SetDataRetrievalPolicyOutput
	if rf, ok := ret.Get(0).(func(*glacier.SetDataRetrievalPolicyInput) *glacier.SetDataRetrievalPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.SetDataRetrievalPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.SetDataRetrievalPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDataRetrievalPolicyRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) SetDataRetrievalPolicyRequest(_a0 *glacier.SetDataRetrievalPolicyInput) (*request.Request, *glacier.SetDataRetrievalPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.SetDataRetrievalPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.SetDataRetrievalPolicyOutput
	if rf, ok := ret.Get(1).(func(*glacier.SetDataRetrievalPolicyInput) *glacier.SetDataRetrievalPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.SetDataRetrievalPolicyOutput)
		}
	}

	return r0, r1
}

// SetDataRetrievalPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) SetDataRetrievalPolicyWithContext(_a0 aws.Context, _a1 *glacier.SetDataRetrievalPolicyInput, _a2 ...request.Option) (*glacier.SetDataRetrievalPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.SetDataRetrievalPolicyOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.SetDataRetrievalPolicyInput, ...request.Option) *glacier.SetDataRetrievalPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.SetDataRetrievalPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.SetDataRetrievalPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVaultAccessPolicy provides a mock function with given fields: _a0
func (_m *GlacierAPI) SetVaultAccessPolicy(_a0 *glacier.SetVaultAccessPolicyInput) (*glacier.SetVaultAccessPolicyOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.SetVaultAccessPolicyOutput
	if rf, ok := ret.Get(0).(func(*glacier.SetVaultAccessPolicyInput) *glacier.SetVaultAccessPolicyOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.SetVaultAccessPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.SetVaultAccessPolicyInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVaultAccessPolicyRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) SetVaultAccessPolicyRequest(_a0 *glacier.SetVaultAccessPolicyInput) (*request.Request, *glacier.SetVaultAccessPolicyOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.SetVaultAccessPolicyInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.SetVaultAccessPolicyOutput
	if rf, ok := ret.Get(1).(func(*glacier.SetVaultAccessPolicyInput) *glacier.SetVaultAccessPolicyOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.SetVaultAccessPolicyOutput)
		}
	}

	return r0, r1
}

// SetVaultAccessPolicyWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) SetVaultAccessPolicyWithContext(_a0 aws.Context, _a1 *glacier.SetVaultAccessPolicyInput, _a2 ...request.Option) (*glacier.SetVaultAccessPolicyOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.SetVaultAccessPolicyOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.SetVaultAccessPolicyInput, ...request.Option) *glacier.SetVaultAccessPolicyOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.SetVaultAccessPolicyOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.SetVaultAccessPolicyInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVaultNotifications provides a mock function with given fields: _a0
func (_m *GlacierAPI) SetVaultNotifications(_a0 *glacier.SetVaultNotificationsInput) (*glacier.SetVaultNotificationsOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.SetVaultNotificationsOutput
	if rf, ok := ret.Get(0).(func(*glacier.SetVaultNotificationsInput) *glacier.SetVaultNotificationsOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.SetVaultNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.SetVaultNotificationsInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVaultNotificationsRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) SetVaultNotificationsRequest(_a0 *glacier.SetVaultNotificationsInput) (*request.Request, *glacier.SetVaultNotificationsOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.SetVaultNotificationsInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.SetVaultNotificationsOutput
	if rf, ok := ret.Get(1).(func(*glacier.SetVaultNotificationsInput) *glacier.SetVaultNotificationsOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.SetVaultNotificationsOutput)
		}
	}

	return r0, r1
}

// SetVaultNotificationsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) SetVaultNotificationsWithContext(_a0 aws.Context, _a1 *glacier.SetVaultNotificationsInput, _a2 ...request.Option) (*glacier.SetVaultNotificationsOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.SetVaultNotificationsOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.SetVaultNotificationsInput, ...request.Option) *glacier.SetVaultNotificationsOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.SetVaultNotificationsOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.SetVaultNotificationsInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadArchive provides a mock function with given fields: _a0
func (_m *GlacierAPI) UploadArchive(_a0 *glacier.UploadArchiveInput) (*glacier.ArchiveCreationOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.ArchiveCreationOutput
	if rf, ok := ret.Get(0).(func(*glacier.UploadArchiveInput) *glacier.ArchiveCreationOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ArchiveCreationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.UploadArchiveInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadArchiveRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) UploadArchiveRequest(_a0 *glacier.UploadArchiveInput) (*request.Request, *glacier.ArchiveCreationOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.UploadArchiveInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.ArchiveCreationOutput
	if rf, ok := ret.Get(1).(func(*glacier.UploadArchiveInput) *glacier.ArchiveCreationOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.ArchiveCreationOutput)
		}
	}

	return r0, r1
}

// UploadArchiveWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) UploadArchiveWithContext(_a0 aws.Context, _a1 *glacier.UploadArchiveInput, _a2 ...request.Option) (*glacier.ArchiveCreationOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.ArchiveCreationOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.UploadArchiveInput, ...request.Option) *glacier.ArchiveCreationOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.ArchiveCreationOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.UploadArchiveInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadMultipartPart provides a mock function with given fields: _a0
func (_m *GlacierAPI) UploadMultipartPart(_a0 *glacier.UploadMultipartPartInput) (*glacier.UploadMultipartPartOutput, error) {
	ret := _m.Called(_a0)

	var r0 *glacier.UploadMultipartPartOutput
	if rf, ok := ret.Get(0).(func(*glacier.UploadMultipartPartInput) *glacier.UploadMultipartPartOutput); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.UploadMultipartPartOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*glacier.UploadMultipartPartInput) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadMultipartPartRequest provides a mock function with given fields: _a0
func (_m *GlacierAPI) UploadMultipartPartRequest(_a0 *glacier.UploadMultipartPartInput) (*request.Request, *glacier.UploadMultipartPartOutput) {
	ret := _m.Called(_a0)

	var r0 *request.Request
	if rf, ok := ret.Get(0).(func(*glacier.UploadMultipartPartInput) *request.Request); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*request.Request)
		}
	}

	var r1 *glacier.UploadMultipartPartOutput
	if rf, ok := ret.Get(1).(func(*glacier.UploadMultipartPartInput) *glacier.UploadMultipartPartOutput); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*glacier.UploadMultipartPartOutput)
		}
	}

	return r0, r1
}

// UploadMultipartPartWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) UploadMultipartPartWithContext(_a0 aws.Context, _a1 *glacier.UploadMultipartPartInput, _a2 ...request.Option) (*glacier.UploadMultipartPartOutput, error) {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *glacier.UploadMultipartPartOutput
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.UploadMultipartPartInput, ...request.Option) *glacier.UploadMultipartPartOutput); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*glacier.UploadMultipartPartOutput)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(aws.Context, *glacier.UploadMultipartPartInput, ...request.Option) error); ok {
		r1 = rf(_a0, _a1, _a2...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WaitUntilVaultExists provides a mock function with given fields: _a0
func (_m *GlacierAPI) WaitUntilVaultExists(_a0 *glacier.DescribeVaultInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*glacier.DescribeVaultInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVaultExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) WaitUntilVaultExistsWithContext(_a0 aws.Context, _a1 *glacier.DescribeVaultInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DescribeVaultInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVaultNotExists provides a mock function with given fields: _a0
func (_m *GlacierAPI) WaitUntilVaultNotExists(_a0 *glacier.DescribeVaultInput) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*glacier.DescribeVaultInput) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitUntilVaultNotExistsWithContext provides a mock function with given fields: _a0, _a1, _a2
func (_m *GlacierAPI) WaitUntilVaultNotExistsWithContext(_a0 aws.Context, _a1 *glacier.DescribeVaultInput, _a2 ...request.WaiterOption) error {
	_va := make([]interface{}, len(_a2))
	for _i := range _a2 {
		_va[_i] = _a2[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(aws.Context, *glacier.DescribeVaultInput, ...request.WaiterOption) error); ok {
		r0 = rf(_a0, _a1, _a2...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
